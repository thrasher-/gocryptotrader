// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ftx

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx(in *jlexer.Lexer, out *WsTradeDataStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "market":
			out.Market = string(in.String())
		case "type":
			out.MessageType = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.TradeData = nil
			} else {
				in.Delim('[')
				if out.TradeData == nil {
					if !in.IsDelim(']') {
						out.TradeData = make([]WsTradeData, 0, 0)
					} else {
						out.TradeData = []WsTradeData{}
					}
				} else {
					out.TradeData = (out.TradeData)[:0]
				}
				for !in.IsDelim(']') {
					var v1 WsTradeData
					easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx1(in, &v1)
					out.TradeData = append(out.TradeData, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx(out *jwriter.Writer, in WsTradeDataStore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		out.String(string(in.Market))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MessageType))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.TradeData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TradeData {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTradeDataStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTradeDataStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx(l, v)
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx1(in *jlexer.Lexer, out *WsTradeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "price":
			out.Price = float64(in.Float64())
		case "size":
			out.Size = float64(in.Float64())
		case "side":
			out.Side = string(in.String())
		case "liquidation":
			out.Liquidation = bool(in.Bool())
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx1(out *jwriter.Writer, in WsTradeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Float64(float64(in.Size))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"liquidation\":"
		out.RawString(prefix)
		out.Bool(bool(in.Liquidation))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx2(in *jlexer.Lexer, out *WsTickerDataStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "market":
			out.Market = string(in.String())
		case "type":
			out.MessageType = string(in.String())
		case "data":
			(out.Ticker).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx2(out *jwriter.Writer, in WsTickerDataStore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		out.String(string(in.Market))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MessageType))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Ticker).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTickerDataStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTickerDataStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx2(l, v)
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx3(in *jlexer.Lexer, out *WsTickerData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bid":
			out.Bid = float64(in.Float64())
		case "ask":
			out.Ask = float64(in.Float64())
		case "bidSize":
			out.BidSize = float64(in.Float64())
		case "askSize":
			out.AskSize = float64(in.Float64())
		case "last":
			out.Last = float64(in.Float64())
		case "time":
			out.Time = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx3(out *jwriter.Writer, in WsTickerData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bid\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Bid))
	}
	{
		const prefix string = ",\"ask\":"
		out.RawString(prefix)
		out.Float64(float64(in.Ask))
	}
	{
		const prefix string = ",\"bidSize\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidSize))
	}
	{
		const prefix string = ",\"askSize\":"
		out.RawString(prefix)
		out.Float64(float64(in.AskSize))
	}
	{
		const prefix string = ",\"last\":"
		out.RawString(prefix)
		out.Float64(float64(in.Last))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Float64(float64(in.Time))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTickerData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTickerData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx3(l, v)
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx4(in *jlexer.Lexer, out *WsOrderbookDataStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "market":
			out.Market = string(in.String())
		case "type":
			out.MessageType = string(in.String())
		case "data":
			easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx5(in, &out.OBData)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx4(out *jwriter.Writer, in WsOrderbookDataStore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		out.String(string(in.Market))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MessageType))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx5(out, in.OBData)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderbookDataStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderbookDataStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx4(l, v)
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx5(in *jlexer.Lexer, out *WsOrderbookData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action":
			out.Action = string(in.String())
		case "bids":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([][2]float64, 0, 4)
					} else {
						out.Bids = [][2]float64{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v4 [2]float64
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v5 := 0
						for !in.IsDelim(']') {
							if v5 < 2 {
								(v4)[v5] = float64(in.Float64())
								v5++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bids = append(out.Bids, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "asks":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([][2]float64, 0, 4)
					} else {
						out.Asks = [][2]float64{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v6 [2]float64
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v7 := 0
						for !in.IsDelim(']') {
							if v7 < 2 {
								(v6)[v7] = float64(in.Float64())
								v7++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Asks = append(out.Asks, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "time":
			out.Time = float64(in.Float64())
		case "checksum":
			out.Checksum = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx5(out *jwriter.Writer, in WsOrderbookData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix[1:])
		out.String(string(in.Action))
	}
	{
		const prefix string = ",\"bids\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Bids {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v10 := range v9 {
					if v10 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v9)[v10]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"asks\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Asks {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v13 := range v12 {
					if v13 > 0 {
						out.RawByte(',')
					}
					out.Float64(float64((v12)[v13]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Float64(float64(in.Time))
	}
	{
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.Int64(int64(in.Checksum))
	}
	out.RawByte('}')
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx6(in *jlexer.Lexer, out *WsOrderDataStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "type":
			out.MessageType = string(in.String())
		case "data":
			easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx7(in, &out.OrderData)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx6(out *jwriter.Writer, in WsOrderDataStore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MessageType))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx7(out, in.OrderData)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderDataStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderDataStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx6(l, v)
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx7(in *jlexer.Lexer, out *WsOrders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "clientId":
			out.ClientID = string(in.String())
		case "market":
			out.Market = string(in.String())
		case "type":
			out.OrderType = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "size":
			out.Size = float64(in.Float64())
		case "status":
			out.Status = string(in.String())
		case "filledSize":
			out.FilledSize = float64(in.Float64())
		case "remainingSize":
			out.RemainingSize = float64(in.Float64())
		case "reduceOnly":
			out.ReduceOnly = bool(in.Bool())
		case "liquidation":
			out.Liquidation = bool(in.Bool())
		case "avgFillPrice":
			out.AvgFillPrice = float64(in.Float64())
		case "postOnly":
			out.PostOnly = bool(in.Bool())
		case "ioc":
			out.IOC = bool(in.Bool())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx7(out *jwriter.Writer, in WsOrders) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"clientId\":"
		out.RawString(prefix)
		out.String(string(in.ClientID))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		out.String(string(in.Market))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Float64(float64(in.Size))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"filledSize\":"
		out.RawString(prefix)
		out.Float64(float64(in.FilledSize))
	}
	{
		const prefix string = ",\"remainingSize\":"
		out.RawString(prefix)
		out.Float64(float64(in.RemainingSize))
	}
	{
		const prefix string = ",\"reduceOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	{
		const prefix string = ",\"liquidation\":"
		out.RawString(prefix)
		out.Bool(bool(in.Liquidation))
	}
	{
		const prefix string = ",\"avgFillPrice\":"
		out.RawString(prefix)
		out.Float64(float64(in.AvgFillPrice))
	}
	{
		const prefix string = ",\"postOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.PostOnly))
	}
	{
		const prefix string = ",\"ioc\":"
		out.RawString(prefix)
		out.Bool(bool(in.IOC))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx8(in *jlexer.Lexer, out *WsMarketsData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Data = make(map[string]WsMarketsDataStorage)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 WsMarketsDataStorage
					easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx9(in, &v14)
					(out.Data)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx8(out *jwriter.Writer, in WsMarketsData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Data {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx9(out, v15Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsMarketsData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsMarketsData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx8(l, v)
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx9(in *jlexer.Lexer, out *WsMarketsDataStorage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "priceIncrement":
			out.PriceIncrement = float64(in.Float64())
		case "sizeIncrement":
			out.SizeIncrement = float64(in.Float64())
		case "marketType":
			out.MarketType = string(in.String())
		case "baseCurrency":
			out.BaseCurrency = string(in.String())
		case "quoteCurrency":
			out.QuoteCurrency = string(in.String())
		case "underlying":
			out.Underlying = string(in.String())
		case "restricted":
			out.Restricted = bool(in.Bool())
		case "future":
			easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx10(in, &out.Future)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx9(out *jwriter.Writer, in WsMarketsDataStorage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"priceIncrement\":"
		out.RawString(prefix)
		out.Float64(float64(in.PriceIncrement))
	}
	{
		const prefix string = ",\"sizeIncrement\":"
		out.RawString(prefix)
		out.Float64(float64(in.SizeIncrement))
	}
	{
		const prefix string = ",\"marketType\":"
		out.RawString(prefix)
		out.String(string(in.MarketType))
	}
	{
		const prefix string = ",\"baseCurrency\":"
		out.RawString(prefix)
		out.String(string(in.BaseCurrency))
	}
	{
		const prefix string = ",\"quoteCurrency\":"
		out.RawString(prefix)
		out.String(string(in.QuoteCurrency))
	}
	{
		const prefix string = ",\"underlying\":"
		out.RawString(prefix)
		out.String(string(in.Underlying))
	}
	{
		const prefix string = ",\"restricted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Restricted))
	}
	{
		const prefix string = ",\"future\":"
		out.RawString(prefix)
		easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx10(out, in.Future)
	}
	out.RawByte('}')
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx10(in *jlexer.Lexer, out *WsMarketsFutureData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "underlying":
			out.Underlying = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "type":
			out.MarketType = string(in.String())
		case "expiry":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Expiry).UnmarshalJSON(data))
			}
		case "perpetual":
			out.Perpetual = bool(in.Bool())
		case "expired":
			out.Expired = bool(in.Bool())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "postOnly":
			out.PostOnly = bool(in.Bool())
		case "imfFactor":
			out.InitialMarginFractionFactor = float64(in.Float64())
		case "underlyingDescription":
			out.UnderlyingDescription = string(in.String())
		case "expiryDescription":
			out.ExpiryDescription = string(in.String())
		case "moveStart":
			out.MoveStart = string(in.String())
		case "positionLimitWeight":
			out.PositionLimitWeight = float64(in.Float64())
		case "group":
			out.Group = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx10(out *jwriter.Writer, in WsMarketsFutureData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"underlying\":"
		out.RawString(prefix)
		out.String(string(in.Underlying))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MarketType))
	}
	{
		const prefix string = ",\"expiry\":"
		out.RawString(prefix)
		out.Raw((in.Expiry).MarshalJSON())
	}
	{
		const prefix string = ",\"perpetual\":"
		out.RawString(prefix)
		out.Bool(bool(in.Perpetual))
	}
	{
		const prefix string = ",\"expired\":"
		out.RawString(prefix)
		out.Bool(bool(in.Expired))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"postOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.PostOnly))
	}
	{
		const prefix string = ",\"imfFactor\":"
		out.RawString(prefix)
		out.Float64(float64(in.InitialMarginFractionFactor))
	}
	{
		const prefix string = ",\"underlyingDescription\":"
		out.RawString(prefix)
		out.String(string(in.UnderlyingDescription))
	}
	{
		const prefix string = ",\"expiryDescription\":"
		out.RawString(prefix)
		out.String(string(in.ExpiryDescription))
	}
	{
		const prefix string = ",\"moveStart\":"
		out.RawString(prefix)
		out.String(string(in.MoveStart))
	}
	{
		const prefix string = ",\"positionLimitWeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.PositionLimitWeight))
	}
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	out.RawByte('}')
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx11(in *jlexer.Lexer, out *WsFillsDataStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "type":
			out.MessageType = string(in.String())
		case "data":
			easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx12(in, &out.FillsData)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx11(out *jwriter.Writer, in WsFillsDataStore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MessageType))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx12(out, in.FillsData)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsFillsDataStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsFillsDataStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx11(l, v)
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx12(in *jlexer.Lexer, out *WsFills) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "market":
			out.Market = string(in.String())
		case "future":
			out.Future = string(in.String())
		case "baseCurrency":
			out.BaseCurrency = string(in.String())
		case "quoteCurrency":
			out.QuoteCurrency = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "size":
			out.Size = float64(in.Float64())
		case "orderId":
			out.OrderID = int64(in.Int64())
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "tradeId":
			out.TradeID = int64(in.Int64())
		case "feeRate":
			out.FeeRate = float64(in.Float64())
		case "fee":
			out.Fee = float64(in.Float64())
		case "feeCurrency":
			out.FeeCurrency = string(in.String())
		case "liquidity":
			out.Liquidity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx12(out *jwriter.Writer, in WsFills) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		out.String(string(in.Market))
	}
	{
		const prefix string = ",\"future\":"
		out.RawString(prefix)
		out.String(string(in.Future))
	}
	{
		const prefix string = ",\"baseCurrency\":"
		out.RawString(prefix)
		out.String(string(in.BaseCurrency))
	}
	{
		const prefix string = ",\"quoteCurrency\":"
		out.RawString(prefix)
		out.String(string(in.QuoteCurrency))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Float64(float64(in.Size))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeID))
	}
	{
		const prefix string = ",\"feeRate\":"
		out.RawString(prefix)
		out.Float64(float64(in.FeeRate))
	}
	{
		const prefix string = ",\"fee\":"
		out.RawString(prefix)
		out.Float64(float64(in.Fee))
	}
	{
		const prefix string = ",\"feeCurrency\":"
		out.RawString(prefix)
		out.String(string(in.FeeCurrency))
	}
	{
		const prefix string = ",\"liquidity\":"
		out.RawString(prefix)
		out.String(string(in.Liquidity))
	}
	out.RawByte('}')
}
func easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx13(in *jlexer.Lexer, out *WSMarkets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = string(in.String())
		case "type":
			out.MessageType = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "action":
			out.Action = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx13(out *jwriter.Writer, in WSMarkets) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel\":"
		out.RawString(prefix[1:])
		out.String(string(in.Channel))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MessageType))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.String(string(in.Action))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSMarkets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA3c70448EncodeGithubComThrasherCorpGocryptotraderExchangesFtx13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSMarkets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA3c70448DecodeGithubComThrasherCorpGocryptotraderExchangesFtx13(l, v)
}
