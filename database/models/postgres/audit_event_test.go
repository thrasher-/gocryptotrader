// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/thrasher-corp/sqlboiler/boil"
	"github.com/thrasher-corp/sqlboiler/queries"
	"github.com/thrasher-corp/sqlboiler/randomize"
	"github.com/thrasher-corp/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuditEvents(t *testing.T) {
	t.Parallel()

	query := AuditEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuditEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	rowsAff, err := o.Delete(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), rowsAff, "should only have deleted one row")

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(0), count, "want zero records")
}

func testAuditEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	rowsAff, err := AuditEvents().DeleteAll(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), rowsAff, "should only have deleted one row")

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(0), count, "want zero records")
}

func testAuditEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	slice := AuditEventSlice{o}

	rowsAff, err := slice.DeleteAll(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), rowsAff, "should only have deleted one row")

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(0), count, "want zero records")
}

func testAuditEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	e, err := AuditEventExists(ctx, tx, o.ID)
	require.NoError(t, err, "Unable to check if AuditEvent exists")
	require.True(t, e, "Expected AuditEventExists to return true")
}

func testAuditEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	auditEventFound, err := FindAuditEvent(ctx, tx, o.ID)
	require.NoError(t, err)
	require.NotNil(t, auditEventFound, "want a record, got nil")
}

func testAuditEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	err = AuditEvents().Bind(ctx, tx, o)
	require.NoError(t, err)
}

func testAuditEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	x, err := AuditEvents().One(ctx, tx)
	require.NoError(t, err)
	require.NotNil(t, x, "expected to get a non nil record")
}

func testAuditEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auditEventOne := &AuditEvent{}
	auditEventTwo := &AuditEvent{}
	err = randomize.Struct(seed, auditEventOne, auditEventDBTypes, false, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct: auditEventOne")
	err = randomize.Struct(seed, auditEventTwo, auditEventDBTypes, false, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct: auditEventTwo")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = auditEventOne.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)
	err = auditEventTwo.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	slice, err := AuditEvents().All(ctx, tx)
	require.NoError(t, err)
	require.Len(t, slice, 2, "want 2 records")
}

func testAuditEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	auditEventOne := &AuditEvent{}
	auditEventTwo := &AuditEvent{}
	err = randomize.Struct(seed, auditEventOne, auditEventDBTypes, false, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct: auditEventOne")
	err = randomize.Struct(seed, auditEventTwo, auditEventDBTypes, false, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct: auditEventTwo")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = auditEventOne.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)
	err = auditEventTwo.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(2), count, "want 2 records")
}

func auditEventBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func auditEventAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func auditEventAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func auditEventBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func auditEventAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func auditEventBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func auditEventAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func auditEventBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func auditEventAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuditEvent) error {
	*o = AuditEvent{}
	return nil
}

func testAuditEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AuditEvent{}
	o := &AuditEvent{}

	seed := randomize.NewSeed()
	err = randomize.Struct(seed, o, auditEventDBTypes, false)
	require.NoError(t, err, "Unable to randomize AuditEvent object")

	AddAuditEventHook(boil.BeforeInsertHook, auditEventBeforeInsertHook)
	err = o.doBeforeInsertHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doBeforeInsertHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected BeforeInsertHook function to empty object, but got: %#v", o)
	auditEventBeforeInsertHooks = []AuditEventHook{}

	AddAuditEventHook(boil.AfterInsertHook, auditEventAfterInsertHook)
	err = o.doAfterInsertHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doAfterInsertHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected AfterInsertHook function to empty object, but got: %#v", o)
	auditEventAfterInsertHooks = []AuditEventHook{}

	AddAuditEventHook(boil.AfterSelectHook, auditEventAfterSelectHook)
	err = o.doAfterSelectHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doAfterSelectHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected AfterSelectHook function to empty object, but got: %#v", o)
	auditEventAfterSelectHooks = []AuditEventHook{}

	AddAuditEventHook(boil.BeforeUpdateHook, auditEventBeforeUpdateHook)
	err = o.doBeforeUpdateHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doBeforeUpdateHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	auditEventBeforeUpdateHooks = []AuditEventHook{}

	AddAuditEventHook(boil.AfterUpdateHook, auditEventAfterUpdateHook)
	err = o.doAfterUpdateHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doAfterUpdateHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected AfterUpdateHook function to empty object, but got: %#v", o)
	auditEventAfterUpdateHooks = []AuditEventHook{}

	AddAuditEventHook(boil.BeforeDeleteHook, auditEventBeforeDeleteHook)
	err = o.doBeforeDeleteHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doBeforeDeleteHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	auditEventBeforeDeleteHooks = []AuditEventHook{}

	AddAuditEventHook(boil.AfterDeleteHook, auditEventAfterDeleteHook)
	err = o.doAfterDeleteHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doAfterDeleteHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected AfterDeleteHook function to empty object, but got: %#v", o)
	auditEventAfterDeleteHooks = []AuditEventHook{}

	AddAuditEventHook(boil.BeforeUpsertHook, auditEventBeforeUpsertHook)
	err = o.doBeforeUpsertHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doBeforeUpsertHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	auditEventBeforeUpsertHooks = []AuditEventHook{}

	AddAuditEventHook(boil.AfterUpsertHook, auditEventAfterUpsertHook)
	err = o.doAfterUpsertHooks(ctx, nil)
	require.NoError(t, err, "Unable to execute doAfterUpsertHooks")
	require.True(t, reflect.DeepEqual(o, empty), "Expected AfterUpsertHook function to empty object, but got: %#v", o)
	auditEventAfterUpsertHooks = []AuditEventHook{}
}

func testAuditEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), count, "want one record")
}

func testAuditEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Whitelist(auditEventColumnsWithoutDefault...))
	require.NoError(t, err)

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), count, "want one record")
}

func testAuditEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	err = o.Reload(ctx, tx)
	require.NoError(t, err)
}

func testAuditEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	slice := AuditEventSlice{o}

	err = slice.ReloadAll(ctx, tx)
	require.NoError(t, err)
}

func testAuditEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	slice, err := AuditEvents().All(ctx, tx)
	require.NoError(t, err)
	require.Len(t, slice, 1, "want one record")
}

var (
	auditEventDBTypes = map[string]string{`ID`: `bigint`, `Type`: `character varying`, `Identifier`: `character varying`, `Message`: `text`, `CreatedAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testAuditEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(auditEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(auditEventAllColumns) == len(auditEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), count, "want one record")

	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventPrimaryKeyColumns...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	rowsAff, err := o.Update(ctx, tx, boil.Infer())
	require.NoError(t, err)
	require.Equal(t, int64(1), rowsAff, "should only affect one row")
}

func testAuditEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(auditEventAllColumns) == len(auditEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuditEvent{}
	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventColumnsWithDefault...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Insert(ctx, tx, boil.Infer())
	require.NoError(t, err)

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), count, "want one record")

	err = randomize.Struct(seed, o, auditEventDBTypes, true, auditEventPrimaryKeyColumns...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(auditEventAllColumns, auditEventPrimaryKeyColumns) {
		fields = auditEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			auditEventAllColumns,
			auditEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuditEventSlice{o}
	rowsAff, err := slice.UpdateAll(ctx, tx, updateMap)
	require.NoError(t, err)
	require.Equal(t, int64(1), rowsAff, "wanted one record updated")
}

func testAuditEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(auditEventAllColumns) == len(auditEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuditEvent{}
	err = randomize.Struct(seed, &o, auditEventDBTypes, true)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer())
	require.NoError(t, err, "Unable to upsert AuditEvent")

	count, err := AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), count, "want one record")

	// Attempt the UPDATE side of an UPSERT
	err = randomize.Struct(seed, &o, auditEventDBTypes, false, auditEventPrimaryKeyColumns...)
	require.NoError(t, err, "Unable to randomize AuditEvent struct")

	err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer())
	require.NoError(t, err, "Unable to upsert AuditEvent")

	count, err = AuditEvents().Count(ctx, tx)
	require.NoError(t, err)
	require.Equal(t, int64(1), count, "want one record")
}
